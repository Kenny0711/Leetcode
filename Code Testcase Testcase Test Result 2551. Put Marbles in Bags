class Solution {
public:
    long long putMarbles(vector<int>& weights, int k) {
        if (k == 1)
            return 0;
        vector<int> twosum;
        int w = weights.size();
        for (int i = 0; i < w - 1; i++)
            twosum.push_back(weights[i] + weights[i + 1]);
        sort(twosum.begin(), twosum.end());
        int ts = twosum.size();
        long long ans = 0;
        for (int i = 0; i < k - 1; i++){
            ans += twosum[ts - 1 - i];
            ans -= twosum[i];
        }
        return ans;
    }
};
//題目解釋:max跟min一定包含weights[0]和weights[i-1]所以只要求分割點就好
//max的分割點把相鄰求出在從最後+(k-1)個數
//min則相反
//上面是未優化版本 可以使用nth_element 來算到第k點 不用把全部排列出來
//下面是優化版本
class Solution {
public:
    long long putMarbles(vector<int>& weights, int k) {
        if (k == 1)
            return 0;
        vector<int> twosum;
        int w = weights.size();
        for (int i = 0; i < w - 1; i++)
            twosum.push_back(weights[i] + weights[i + 1]);
        long long ans = 0;
        nth_element(twosum.begin(), twosum.begin() + k - 1, twosum.end());
        ans = ans - accumulate(twosum.begin(), twosum.begin() + k - 1, 0LL);
        nth_element(twosum.begin(), twosum.end() - k + 1, twosum.end());
        ans = ans + accumulate(twosum.end() - k + 1, twosum.end(), 0LL);
        
        return ans;
    }
};
